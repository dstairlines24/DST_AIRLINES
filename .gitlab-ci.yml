variables:
  REGISTRY: "docker.io"
  APP_IMAGE: "guillaumegossmann/dst_airlines_app"
  APP_ADMIN_IMAGE: "guillaumegossmann/dst_airlines_app_admin"
  APP_FORM_IMAGE: "guillaumegossmann/dst_airlines_app_form"
  IP_VM: 127.0.0.1
  # IP_VM: 34.250.19.32
  PORT_DEV_APP: 5002
  PORT_DEV_APP_FORM: 5001
  PORT_DEV_APP_ADMIN: 5000
  PORT_DEV_APP_ADMIN_JUPYTER: 8888
  PORT_DEV_APP_ADMIN_DASH: 8051
  PORT_PROD_APP: 15002
  PORT_PROD_APP_FORM: 15001
  PORT_PROD_APP_ADMIN: 15000
  PORT_PROD_APP_ADMIN_JUPYTER: 18888
  PORT_PROD_APP_ADMIN_DASH: 18051
  
image:
  name: "python:3.9-slim"
  entrypoint: ["/bin/sh", "-c"]

stages:
  - test
  - build
  - deploy-dev
  - deploy-prod

.do_strategy:
  variables:
    GIT_STRATEGY: fetch
    GIT_CLEAN_FLAGS: -ffdx -e data/ -e app_admin/scripts/__pycache__/
    DOCKER_TLS_CERTDIR: ""

test-app:
  stage: test
  extends: .do_strategy
  script:
    - cd app/
    - sudo pip install --upgrade pip
    - sudo apt-get update
    - pip install -r requirements.txt
    # - python3 -m unittest discover tests/
    # - python -m unittest discover -s app/tests -p "*.py"

test-app_admin:
  stage: test
  extends: .do_strategy
  script:
    - cd app_admin/
    - sudo pip install --upgrade pip
    - sudo apt-get update
    - pip install -r requirements.txt

test-app_form:
  stage: test
  extends: .do_strategy
  script:
    - cd app_form/
    - sudo pip install --upgrade pip
    - sudo apt-get update
    - pip install -r requirements.txt

.do_docker_logging:
  # services:
  #   - docker:dind
  before_script:
    - echo "======== before_script start ========" # Débuggage
    - echo "DOCKER_USERNAME= $DOCKER_USERNAME" # Débuggage
    - echo "DOCKER_PASSWORD= $DOCKER_PASSWORD" # Débuggage
    - if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then echo "Docker credentials not set"; exit 1; fi
    - echo "Logging in to Docker..."
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - echo "======== before_script end ========" 

build-app:
  stage: build
  image: docker:latest
  extends: 
    - .do_docker_logging
    - .do_strategy
  script:
    - docker build -f Dockerfile.app_admin -t $APP_ADMIN_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $APP_ADMIN_IMAGE:$CI_COMMIT_SHORT_SHA

build-app_admin:
  stage: build
  image: docker:latest
  extends: 
    - .do_docker_logging
    - .do_strategy
  script:
    - docker build -f Dockerfile.app -t $APP_FORM_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $APP_FORM_IMAGE:$CI_COMMIT_SHORT_SHA

build-app_form:
  stage: build
  image: docker:latest
  extends: 
    - .do_docker_logging
    - .do_strategy
  script:
    - docker build -f Dockerfile.app_form -t $APP_FORM_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $APP_FORM_IMAGE:$CI_COMMIT_SHORT_SHA

stop-dev:
  stage: deploy-dev
  extends: .do_strategy
  variables:
    NAMESPACE: dev
  when: manual
  # Don't stop the "review" for master branch or tags,
  # it is only for branches (so PRs (most of the time))
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    action: stop
  script:
    - docker-compose down

deploy-dev:
  stage: deploy-dev
  image: docker:latest
  extends: 
    - .do_docker_logging
    - .do_strategy
  variables:
    NAMESPACE: dev
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    url: |
      http://$IP_VM:$PORT_DEV_APP
      http://$IP_VM:$PORT_DEV_APP_FORM
      http://$IP_VM:$PORT_DEV_APP_ADMIN
      http://$IP_VM:$PORT_DEV_APP_ADMIN_JUPYTER
      http://$IP_VM:$PORT_DEV_APP_ADMIN_DASH
    on_stop: stop-dev
  script:
    - echo "Vérification de docker-compose"
    - docker-compose --version
    - echo "Démarrage des services avec docker-compose"
    - docker-compose -f docker-compose.yml up --pull always -d
    - echo "Affichage des logs de docker-compose"
    - docker-compose logs
    - echo "Liste des conteneurs Docker"
    - docker ps

deploy-prod:
  stage: deploy-prod
  image: docker:latest
  extends: 
    - .do_docker_logging
    - .do_strategy
  variables:
    NAMESPACE: prod
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    url: |
      http://$IP_VM:$PORT_PROD_APP
      http://$IP_VM:$PORT_PROD_APP_FORM
      http://$IP_VM:$PORT_PROD_APP_ADMIN
      http://$IP_VM:$PORT_PROD_APP_ADMIN_JUPYTER
      http://$IP_VM:$PORT_PROD_APP_ADMIN_DASH
  when: manual
  only:
    - main
  script:
    - docker-compose -f docker-compose.yml up --pull always -d
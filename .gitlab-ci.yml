variables:
  REGISTRY: "docker.io"
  APP_IMAGE: "guillaumegossmann/dst_airlines_app"
  APP_ADMIN_IMAGE: "guillaumegossmann/dst_airlines_app_admin"
  APP_FORM_IMAGE: "guillaumegossmann/dst_airlines_app_form"
  APP_DASH_IMAGE: "guillaumegossmann/dst_airlines_app_dash"
  IP_VM: 127.0.0.1
  PORT_DEV_APP: 5002
  PORT_DEV_APP_FORM: 5001
  PORT_DEV_APP_ADMIN: 5000
  PORT_DEV_APP_ADMIN_JUPYTER: 8888
  PORT_DEV_APP_DASH: 8051
  PORT_PROD_APP: 15002
  PORT_PROD_APP_FORM: 15001
  PORT_PROD_APP_ADMIN: 15000
  PORT_PROD_APP_ADMIN_JUPYTER: 18888
  PORT_PROD_APP_DASH: 18051
  
image:
  name: "python:3.9-slim"
  entrypoint: ["/bin/sh", "-c"]

stages:
  - test
  - build
  - deploy-dev
  - deploy-prod

.do_strategy:
  before_script:
    - whoami  # Affiche l'utilisateur courant
    - id  # Affiche l'UID et le GID de l'utilisateur
  variables:
    GIT_STRATEGY: fetch
    # GIT_CLEAN_FLAGS: -ffdx -e data/ -e '*/__pycache__/*' -e '*/.ipynb_checkpoints/*'
    GIT_CLEAN_FLAGS: -ffdx -e data/ -e app_admin/scripts/.ipynb_checkpoints/ -e app_admin/__pycache__/ -e app_admin/scripts/__pycache__/ -e app/__pycache__/ -e app_dash/__pycache__/ -e app_form/__pycache__/ -e app_form/scripts/__pycache__/ -e functions/__pycache__ -e model/__pycache__

test-app:
  stage: test
  extends: .do_strategy
  script:
    - cd app/
    - sudo pip install --upgrade pip
    - sudo apt-get update
    - pip install -r requirements.txt
    # - python3 -m unittest discover tests/
    # - python -m unittest discover -s app/tests -p "*.py"

test-app_admin:
  stage: test
  extends: .do_strategy
  script:
    - cd app_admin/
    - sudo pip install --upgrade pip
    - sudo apt-get update
    - pip install -r requirements.txt

test-app_form:
  stage: test
  extends: .do_strategy
  script:
    - cd app_form/
    - sudo pip install --upgrade pip
    - sudo apt-get update
    - pip install -r requirements.txt

.do_dind:
  services:
    - docker:dind

.do_docker_logging:
  before_script:
    - whoami  # Affiche l'utilisateur courant
    - id  # Affiche l'UID et le GID de l'utilisateur
    - echo "======== before_script start ========" # Débuggage
    - if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then echo "Docker credentials not set"; exit 1; fi
    - echo "Logging in to Docker..."
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - echo "======== before_script end ========" 

build-app:
  stage: build
  image: docker:latest
  rules:
    - changes:
        - Dockerfile.app
        - app/*
  extends: 
    - .do_dind
    - .do_strategy
    - .do_docker_logging
  script:
    - docker build -f Dockerfile.app -t $APP_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker tag $APP_IMAGE:$CI_COMMIT_SHORT_SHA $APP_IMAGE:latest
    - docker push $APP_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $APP_IMAGE:latest

build-app_admin:
  stage: build
  image: docker:latest
  rules:
    - changes:
        - Dockerfile.app_admin
        - app_admin/*
  extends: 
    - .do_dind
    - .do_strategy
    - .do_docker_logging
  script:
    - docker build -f Dockerfile.app_admin -t $APP_ADMIN_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker tag $APP_ADMIN_IMAGE:$CI_COMMIT_SHORT_SHA $APP_ADMIN_IMAGE:latest
    - docker push $APP_ADMIN_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $APP_ADMIN_IMAGE:latest

build-app_dash:
  stage: build
  image: docker:latest
  rules:
    - changes:
        - Dockerfile.app_dash
        - app_dash/*
  extends: 
    - .do_dind
    - .do_strategy
    - .do_docker_logging
  script:
    - docker build -f Dockerfile.app_dash -t $APP_DASH_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker tag $APP_DASH_IMAGE:$CI_COMMIT_SHORT_SHA $APP_DASH_IMAGE:latest
    - docker push $APP_DASH_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $APP_DASH_IMAGE:latest

build-app_form:
  stage: build
  image: docker:latest
  rules:
    - changes:
        - Dockerfile.app_form
        - app_form/*
  extends: 
    - .do_dind
    - .do_strategy
    - .do_docker_logging
  script:
    - docker build -f Dockerfile.app_form -t $APP_FORM_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker tag $APP_FORM_IMAGE:$CI_COMMIT_SHORT_SHA $APP_FORM_IMAGE:latest
    - docker push $APP_FORM_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $APP_FORM_IMAGE:latest

stop-dev:
  stage: deploy-dev
  extends: .do_strategy
  variables:
    NAMESPACE: dev
  when: manual
  # Don't stop the "review" for master branch or tags,
  # it is only for branches (so PRs (most of the time))
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    action: stop
  script:
    - docker-compose down

deploy-dev:
  stage: deploy-dev
  image: docker:latest
  extends: 
    - .do_dind
    - .do_strategy
    - .do_docker_logging
  variables:
    NAMESPACE: dev
  # services:
  #   - name: docker:dind
  #     command: ["--host=tcp://0.0.0.0:2375"]
  # variables:
  #   DOCKER_HOST: unix:///var/run/docker.sock 
  #   DOCKER_HOST: tcp://docker:2375 
  #   DOCKER_TLS_CERTDIR: "/certs"
  #   DOCKER_DRIVER: overlay2
  #   DOCKER_TLS_CERTDIR: ""
  environment:
    name: $NAMESPACE-$CI_BUILD_REF_NAME
    url: |
      http://$IP_VM:$PORT_DEV_APP
      http://$IP_VM:$PORT_DEV_APP_FORM
      http://$IP_VM:$PORT_DEV_APP_ADMIN
      http://$IP_VM:$PORT_DEV_APP_ADMIN_JUPYTER
      http://$IP_VM:$PORT_DEV_APP_DASH
    on_stop: stop-dev
  script:
    - sudo chmod -R 755 data
    # - sudo chown -R gitlab-runner:gitlab-runner .
    - ls -lR
    - pwd
    - echo "Vérification de docker-compose"
    - docker-compose --version
    # - docker-compose config 
    - echo "Démarrage des services avec docker-compose"
    # - docker-compose -f docker-compose.yml up --pull always -d
    - docker-compose down
    - docker-compose up
    - echo "Affichage des logs de docker-compose"
    - docker-compose logs
    - echo "Liste des conteneurs Docker"
    - docker info
    - docker ps

deploy-prod:
  stage: deploy-prod
  image: docker:latest
  extends: 
    - .do_dind
    - .do_strategy
    - .do_docker_logging
  environment:
    name: prod-$CI_BUILD_REF_NAME
    url: |
      http://$IP_VM:$PORT_PROD_APP
      http://$IP_VM:$PORT_PROD_APP_FORM
      http://$IP_VM:$PORT_PROD_APP_ADMIN
      http://$IP_VM:$PORT_PROD_APP_ADMIN_JUPYTER
      http://$IP_VM:$PORT_PROD_APP_DASH
  when: manual
  only:
    - main
  script:
    - ls -R
    - pwd
    - echo "Vérification de docker-compose"
    - docker-compose --version
    - echo "Démarrage des services avec docker-compose"
    - docker-compose up
    - echo "Affichage des logs de docker-compose"
    - docker-compose logs
    - echo "Liste des conteneurs Docker"
    - docker info
    - docker ps